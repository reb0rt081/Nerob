
@{
    ViewBag.Title = "Picking";
}

<html>
    <head>
        <style type="text/css">
            body { font-family: Arial, Helvetica, sans-serif; }
            h1 { font-size: 3.0em;}
            h2, h3 { font-size:1.5em; align-content: center}
            em { color: orange; }
            strong { color: red; }
            .leftColumn{ grid-column: 1 }
            .centerColumn { grid-column: 2 }
            .rightColumn { grid-column: 3}
            .wrapper {
                display: grid;
                height: 100%;
                grid-template-columns: repeat(3, 1fr);
                grid-gap: 10px;
                grid-auto-rows: minmax(100px, auto);
            }
        </style>
    </head>
    <body>
        <h1 align="center">Picking View</h1>
        <div class="wrapper">
            <div class="leftColumn">
                <h2>Description</h2>
            </div>
            <div id="centerDiv" class="centerColumn">
                <!--<h2 id="itemName"></h2>-->
            </div>
            <div class="rightColumn">
                <h2>Location</h2>
            </div>
        </div>
        <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
        <script>
            var apiUrl = 'http://localhost:59626/api/picking?';
        //  document is the html ID for the html page. Equivalent to C# this.
        //  $(document) uses jQuery to wrap the global document object as a javascript object.

        //  A page can't be manipulated safely until the document is "ready."
        //  jQuery detects this state of readiness for you.
        //  Code included inside $(document).ready() will only run once the page Document Object Model(DOM) is ready for JavaScript code to execute.

        $(document).ready(function () {
            // In jQuery, the $ sign it's just an alias to jQuery(), then an alias to a function.
            // .getJSON always returns result 'data'.
            // Send an AJAX request
            $.getJSON(apiUrl + 'maxItems=100')
                .done(function (data) {
                    // The .each() method is designed to make DOM looping constructs concise and less error-prone.
                    // On success, 'data' contains a list of products.
                    $.each(data, function (key, item) {
                        // Add a list item for the product.
                        $('<h2>', { text: item.ItemName }).appendTo($('#centerDiv'));
                    });
                });
            //var element = $(document).getElementById("itemName");
            //element.value = "test";
        });          

        </script>
    </body>
</html>

